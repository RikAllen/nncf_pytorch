{
    "target_device": "DLA",
    "config": {
        "quantization": {
            "int4bfp": {
                "bits": 4,
                "exponent_bits": 5,
                "block_size": 32,
                "mode": "blockfp",
                "granularity": "perblock"
            },
            "int5bfp": {
                "bits": 5,
                "exponent_bits": 5,
                "block_size": 32,
                "mode": "blockfp",
                "granularity": "perblock"
            },
            "int5bfp_double": {
                "bits": 9,
                "exponent_bits": 5,
                "block_size": 32,
                "mode": "blockfp",
                "granularity": "perblock"
            },            
            "int5bfp_double_folded": {
                "bits": 9, // Assume 2 shift/add in the input convolution
                "exponent_bits": 5,
                "block_size": 32,
                "mode": "blockfp",
                "granularity": "perblock",
                "folded":true
            },
            "int5bfp_folded": {
                "bits": 5, 
                "exponent_bits": 5,
                "block_size": 32,
                "mode": "blockfp",
                "granularity": "perblock",
                "folded":true
            },
            "int4bfp_double_folded": {
                "bits": 7, // Assume 2 shift/add in the input convolution
                "exponent_bits": 5,
                "block_size": 32,
                "mode": "blockfp",
                "granularity": "perblock",
                "folded":true
            },
            "int4bfp_folded": {
                "bits": 4, 
                "exponent_bits": 5,
                "block_size": 32,
                "mode": "blockfp",
                "granularity": "perblock",
                "folded":true
            },
            "int8bfp": {
                "bits": 8,
                "exponent_bits": 5,
                "block_size": 32,
                "mode": "blockfp",
                "granularity": "perblock"
            },
            "int8bfp_folded": {
                "bits": 8,
                "exponent_bits": 5,
                "block_size": 32,
                "mode": "blockfp",
                "granularity": "perblock",
                "folded":true
            },            
            "fp16": {
                "bits": 12,
                "exponent_bits": 5,
                "block_size": 1,
                "mode": "blockfp",
                "granularity": "perblock"
            }
        }
    },
    "operations": [
        {
            "type": "Convolution",
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "DepthWiseConvolution",
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "FoldedConvolution",
            "quantization": {
                "activations": "int8bfp_folded",
                "weights": "int8bfp_folded"
            }
        },
        {
            "type": "MatMul",
            "quantization": {
                "activations": "int5bfp",
                "weights": "int5bfp"
            }
        },
        {
            "type": "Add",
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "Multiply",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "Maximum",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "Less",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "LessEqual",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "Greater",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "GreaterEqual",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "Divide",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "Minimum",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "Equal",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "Subtract",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "NotEqual",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "FloorMod",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "LogicalOr",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "LogicalXor",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "LogicalAnd",
            "attributes": {
                "scales": "unified"
            },
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "LogicalNot",
            "quantization": {
                "activations": "int8bfp",
                "weights": "int8bfp"
            }
        },
        {
            "type": "Power",
            "quantization": {
                "activations": "int8bfp"
            }
        },
        {
            "type": "AvgPool",
            "quantization": {
                "activations": "int8bfp"
            }
        },
        {
            "type": "ReduceMean",
            "quantization": {
                "activations": "int8bfp"
            }
        },
        {
            "type": "MaxPool",
            "quantization": {
                "activations": "int8bfp"
            }
        },
        {
            "type": "ReduceMax"
        },
        {
            "type": "Interpolate",
            "attributes": {
                "mode": "linear"
            },
            "quantization": {
                "activations": "int8bfp"
            }
        },
        {
            "type": "Interpolate",
            "attributes": {
                "mode": "nearest"
            }
        },
        {
            "type": "MVN",
            "quantization": {
                "activations": "int8bfp"
            }
        },
        {"type": "Reshape"},
        {"type": "Concat"},
        {"type": "Flatten"},
        {"type": "Squeeze"},
        {"type": "Unsqueeze"},
        {"type": "Split"},
        {"type": "Crop"},
        {"type": "Transpose"},
        {"type": "Tile"}
    ]
}
